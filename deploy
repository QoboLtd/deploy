#!/usr/bin/php
<?php
/**
 * Deploy
 * 
 * Deployment automation framework
 * 
 * @author Leonid Mamchenkov <l.mamchenkov@qobo.biz>
 */
namespace Deploy;
use \Deploy\Config\Factory;
use \Deploy\Runnable\Project;
// Load libraries
require_once dirname(__FILE__) . DIRECTORY_SEPARATOR . 'vendor' . DIRECTORY_SEPARATOR . 'autoload.php';
require_once dirname(__FILE__) . DIRECTORY_SEPARATOR . 'lib' . DIRECTORY_SEPARATOR . 'Deploy' . DIRECTORY_SEPARATOR . 'autoload.php';

array_shift($argv);

$projectName = null;
if (count($argv) >= 1) {
	$projectName = $argv[0];
}
// These are the things we need to know
if (count($argv) <> 3) {
	printHelp($projectName);
	die();
}

$target = array();
$target['project'] = array($projectName);
$target['environment'] = array($argv[1]);
$target['command'] = array($argv[2]);

try {
	$config = Factory::init($projectName);
	$config = $config->data;
	$config[Project::TARGET_KEY] = $target;

	$project = new Project($config);
	$project->run();
} catch (Exception $e) {
	die("\n\nERROR: " . $e->getMessage() . "\n");
}

/**
 * Print help
 * 
 * If the valid project configuration name is given,
 * then we only list the options for that project.  If no
 * name is given, then we list all projects.  Otherwise,
 * we show an error
 * 
 * @param string $projectName
 * @return void
 */
function printHelp($projectName) {
	print "\nUsage: deploy PROJECT ENVIRONMENT COMMAND\n\n";
	
	if (empty($projectName)) {
		$projects = Factory::getList();
		print "Available projects:\n\n";
		foreach ($projects as $project) {
			print "\t- " . $project . "\n";
		}
		return;
	}
	
	try {
		$config = Factory::init($projectName);
		$config = $config->data;

		$project = new Project($config);

	}
	catch (\Exception $e) {
		die("\n\nERROR: " . $e->getMessage() . "\n");
	}
	print "Here is the list of possible options for $projectName:\n\n";
	$children = $project->listChildren();
	printOptions($children);
	
}

/**
 * Recursively print available options
 * 
 * @param array $options Options to print
 * @param integer $depth Indentation depth
 * @return void
 */
function printOptions($options, $depth = 0) {
	foreach ($options as $name => $children) {
		if ($depth > 0) {
			list($type, $name) = explode(':', $name, 2);
			print str_repeat("\t", $depth) . '- ' . "$type $name\n";
		}
		$depth++;
		
		if (empty($children)) {
			continue;
		}
		foreach ($children as $child) {
			printOptions($child, $depth);
		}
	}
}
?>
